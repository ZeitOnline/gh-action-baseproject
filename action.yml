name: 'ZON Baseproject Connector'
description: 'A composite Action that fetches infrastructure config generated by the ZeitOnline baseproject Terraform module.'

inputs:

  # Project Name and Environment are mandatory and uniquely identify one
  # specific baseproject instance.
  project_name:
    description: 'The Name (project_name) of the ZON baseproject'
    required: true
  environment:
    description: 'The Environment in which the workflow runs'
    required: true
    default: 'production'
  unique_id:
    description: 'The unique TF baseproject identifier'
    required: false
    default: ''
  python_binary:
    description: 'Python binary to use'
    required: false
    default: 'python'

  # Authentication-related features to be used in the parent workflow
  google_auth:
    description: 'Authenticate to Google Cloud'
    required: false
    default: 'false'
  gke_auth:
    description: 'Authenticate to GKE (Google Kubernetes Engine)'
    required: false
    default: 'false'
  gcr_auth:
    description: 'Authenticate to GCR (Googke Container Registry)'
    required: false
    default: 'false'
  gar_docker_auth:
    description: 'Authenticate to Google Artifact Registry for Docker'
    required: false
    default: 'false'
  vault_export_token:
    description: 'Get a Vault Token and export it as VAULT_TOKEN'
    required: false
    default: 'false'
  python_registry:
    description: 'Setup Auth for the Google Python Artifact Registry'
    required: false
    default: 'false'

  # docker setup, both for convenience and centralization
  setup_buildx:
    description: 'Setup docker buildx. Enabling gar_docker_auth implies this; set explicitly to "false" to disable'
    required: false
    default: 'unset'

outputs:
  project_name:
    value: ${{ steps.baseproject-config.outputs.project_name }}
  environment:
    value: ${{ steps.baseproject-config.outputs.environment }}
  unique_id:
    value: ${{ steps.baseproject-config.outputs.unique_id }}
  namespace:
    value: ${{ steps.baseproject-config.outputs.namespace }}
  ci_sa_name:
    value: ${{ steps.baseproject-config.outputs.ci_sa_name }}
  wi_sa_name:
    value: ${{ steps.baseproject-config.outputs.wi_sa_name }}
  vault_role:
    value: ${{ steps.baseproject-config.outputs.vault_role }}
  vault_addr:
    value: https://vault.ops.zeit.de
  vault_token:
    value: ${{ steps.vault_token.outputs.vault_token }}
  gha_vault_path:
    value: github-actions
  gha_vault_role:
    value: ${{ steps.baseproject-config.outputs.gha_vault_role }}-${{ steps.repo_without_slash.outputs.result }}
  gcloud_access_token:
    value: ${{ steps.output_gcloud_token.outputs.gcloud_access_token }}

  # Conditional outputs
  cluster_name:
    value: ${{ steps.baseproject-config.outputs.cluster_name || '' }}
  cluster_project:
    value: ${{ steps.baseproject-config.outputs.cluster_project || '' }}
  cluster_location:
    value: ${{ steps.baseproject-config.outputs.cluster_location || '' }}

  # Static outputs
  gcr_image_registry:
    value: eu.gcr.io/zeitonline-210413
  python_registry_url:
    value: https://europe-west3-python.pkg.dev/zeitonline-engineering/pypi-zon/


runs:

  using: "composite"

  steps:
    - id: vault_path
      shell: bash
      run: echo "result=zon-v2/data/baseproject/${{ inputs.project_name }}/${{ inputs.environment }}/${{ inputs.unique_id }}" | tr -s / >> $GITHUB_OUTPUT

    - name: Retrieve Baseproject Config from Vault
      id: raw-config
      uses: hashicorp/vault-action@4c06c5ccf5c0761b6029f56cfb1dcf5565918a3b # v3.4.0
      with:
        url: https://vault.ops.zeit.de
        method: jwt
        path: github-actions
        role: gha-baseproject
        secrets: |
          ${{ steps.vault_path.outputs.result }}/infos raw | INFOS;

    - id: baseproject-config
      shell: bash
      # Right now this is the only known way to pass outputs from a JSON value as outputs from
      # a composite action (hypothesis: between here and any outputs.xy.value, some JSON auto-
      # detection mambo-jambo kicks in and converts the JSON to an internal map-like data
      # structure from which it's impossible (or at least unclear) how to get individual fields).
      run: |
        echo "project_name=${{ inputs.project_name }}" >> $GITHUB_OUTPUT
        echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
        echo "ci_sa_name=${{ fromJSON(steps.raw-config.outputs.INFOS).ci-sa-name }}" >> $GITHUB_OUTPUT
        echo "wi_sa_name=${{ fromJSON(steps.raw-config.outputs.INFOS).wi-sa-name }}" >> $GITHUB_OUTPUT
        echo "vault_role=${{ fromJSON(steps.raw-config.outputs.INFOS).vault-role }}" >> $GITHUB_OUTPUT
        echo "gha_vault_role=${{ fromJSON(steps.raw-config.outputs.INFOS).gha-vault-role }}" >> $GITHUB_OUTPUT

    - name: Retrieve Baseproject K8S Config from Vault
      if: inputs.gke_auth == 'true'
      id: raw-config-k8s
      uses: hashicorp/vault-action@4c06c5ccf5c0761b6029f56cfb1dcf5565918a3b # v3.4.0
      with:
        url: https://vault.ops.zeit.de
        method: jwt
        path: github-actions
        role: gha-baseproject
        secrets: |
          ${{ steps.vault_path.outputs.result }}/infos-k8s raw | INFOS_K8S;

    - name: Warning for missing K8s config
      if: inputs.gke_auth == 'true' && steps.raw-config-k8s.outputs.INFOS_K8S == ''
      shell: bash
      run: |
        echo "## ⚠️ Warning: K8s Configuration Secret Not Found" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The separate K8s configuration secret was not found at:" >> $GITHUB_STEP_SUMMARY
        echo "\`${{ steps.vault_path.outputs.result }}/infos-k8s\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Note:** The secret is only created if \`ci_sa_is_namespace_admin\` is set in your baseproject_k8s instance." >> $GITHUB_STEP_SUMMARY

    - id: baseproject-config-k8s
      if: inputs.gke_auth == 'true'
      shell: bash
      run: |
        echo "namespace"=${{ fromJSON(steps.raw-config-k8s.outputs.INFOS_K8S).namespace }} >> $GITHUB_OUTPUT
        echo "cluster_name"=${{ fromJSON(steps.raw-config-k8s.outputs.INFOS_K8S).cluster-name }} >> $GITHUB_OUTPUT
        echo "cluster_project"=${{ fromJSON(steps.raw-config-k8s.outputs.INFOS_K8S).cluster-project }} >> $GITHUB_OUTPUT
        echo "cluster_location"=${{ fromJSON(steps.raw-config-k8s.outputs.INFOS_K8S).cluster-location }} >> $GITHUB_OUTPUT

    - name: Retrieve zon-ops GitHub user GPG key
      id: zon-ops-gpg
      uses: hashicorp/vault-action@4c06c5ccf5c0761b6029f56cfb1dcf5565918a3b # v3.4.0
      with:
        url: https://vault.ops.zeit.de
        method: jwt
        path: github-actions
        role: gha-baseproject
        secrets: zon/v1/github/zon-ops gpg_key_private

    - name: Import GPG key for zon-ops user
      uses: crazy-max/ghaction-import-gpg@cb9bde2e2525e640591a934b1fd28eef1dcaf5e5 # v6
      continue-on-error: true
      with:
        gpg_private_key: ${{ steps.zon-ops-gpg.outputs.gpg_key_private }}
        git_user_signingkey: true
        git_commit_gpgsign: true
        # git_tag_gpgsign: true
        git_config_global: true

    - name: GCloud OIDC Auth
      id: auth
      if: inputs.google_auth == 'true' || inputs.gke_auth == 'true' || inputs.gcr_auth == 'true' || inputs.gar_docker_auth == 'true'
      uses: google-github-actions/auth@6fc4af4b145ae7821d527454aa9bd537d1f2dc5f # v2
      with:
        token_format: 'access_token'
        workload_identity_provider: projects/161854031382/locations/global/workloadIdentityPools/github-pool/providers/github-actions-provider
        service_account: ${{ steps.baseproject-config.outputs.ci_sa_name }}

    - name: Set GCloud Access Token as output
      id: output_gcloud_token
      if: steps.auth.outputs.access_token != ''
      shell: bash
      run: |
        echo "gcloud_access_token=${{ steps.auth.outputs.access_token }}" >> $GITHUB_OUTPUT
        echo "GCLOUD_TOKEN=${{ steps.auth.outputs.access_token }}" >> $GITHUB_ENV

    - name: Write GKE Credentials to kubeconfig
      if: inputs.gke_auth == 'true'
      uses: google-github-actions/get-gke-credentials@64bc7249bbcf78056bb92f14d3cedc2da193946c # v2.3.5
      with:
        cluster_name: ${{ steps.baseproject-config-k8s.outputs.cluster_name }}
        project_id: ${{ steps.baseproject-config-k8s.outputs.cluster_project }}
        location: ${{ steps.baseproject-config-k8s.outputs.cluster_location }}

    - if: inputs.gke_auth == 'true'
      shell: bash
      run: kubectl config set-context --current --namespace=${{ steps.baseproject-config-k8s.outputs.namespace }}

    - name: Login to GCR
      if: inputs.gcr_auth == 'true'
      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3
      with:
        registry: eu.gcr.io
        username: oauth2accesstoken
        password: ${{ steps.auth.outputs.access_token }}

    - name: Login to Docker GAR
      if: inputs.gar_docker_auth == 'true'
      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3
      with:
        registry: europe-west3-docker.pkg.dev
        username: oauth2accesstoken
        password: ${{ steps.auth.outputs.access_token }}

    - id: repo_without_slash
      shell: bash
      run: echo "result=${{ github.repository }}" | tr -s / - >> $GITHUB_OUTPUT

    - name: Export a Vault token
      id: vault-export-token
      if: inputs.vault_export_token == 'true'
      uses: hashicorp/vault-action@4c06c5ccf5c0761b6029f56cfb1dcf5565918a3b # v3.4.0
      with:
        url: https://vault.ops.zeit.de
        method: jwt
        path: github-actions
        role: ${{ steps.baseproject-config.outputs.gha_vault_role }}-${{ steps.repo_without_slash.outputs.result }}
        exportToken: true
        secrets: sys/auth "token/" # Because the action needs to read something and Token auth is always there

    - id: vault_token
      run: echo "vault_token=$VAULT_TOKEN" >> $GITHUB_OUTPUT
      shell: bash

    - name: Setup Python Artifact Registry
      id: python-registry
      if: inputs.python_registry == 'true'
      shell: bash
      run: |
        ${{ inputs.python_binary }} -m pip install --upgrade --upgrade-strategy eager setuptools twine keyrings.google-artifactregistry-auth
    - name: Parse setup docker buildx input
      shell: bash
      run: |
        setup_buildx="${{ inputs.setup_buildx }}"
        if [[ "$setup_buildx" != "false" && "${{ inputs.gar_docker_auth }}" = "true" ]]; then
            setup_buildx="true"
        fi
        echo "setup_buildx=$setup_buildx" >> $GITHUB_ENV
    - name: Setup docker buildx container
      if: env.setup_buildx == 'true'
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      with:
        buildkitd-config-inline: |
          debug = true
          [registry."docker.io"]
            mirrors = ["https://mirror.gcr.io"]
    # Support `docker buildx build --cache-[from|to] type=gha` directly,
    # and not just via docker/build-push-action.
    - name: Setup docker buildx environment
      if: env.setup_buildx == 'true'
      uses: crazy-max/ghaction-github-runtime@3cb05d89e1f492524af3d41a1c98c83bc3025124 # v3.1.0
